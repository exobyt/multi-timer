{"version":3,"sources":["/index.ts"],"sourcesContent":["import { Sortable } from \"@shopify/draggable\";\nimport './style.css'\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const timerList = document.getElementById(\"timerList\") as HTMLDivElement;\n  const addTimerBtn = document.getElementById(\"addTimerBtn\") as HTMLButtonElement;\n  const defaultTimeInput = document.getElementById(\"defaultTime\") as HTMLInputElement;\n  const notifyCheckbox: HTMLInputElement = document.getElementById(\"notifyCheckbox\") as HTMLInputElement;\n\n  notifyCheckbox.addEventListener(\"change\", function () {\n    if (this.checked)  {\n      requestNotificationPermission();\n    }\n  });\n\n  addTimerBtn.addEventListener(\"click\", addTimer);\n\n  // Initialize Draggable for the timer list after timers are added\n  const sortable = new Sortable(timerList, {\n    draggable: \".timer\", // assuming each timer is a direct child div of timerList\n    handle: \".timer-handle\",\n  });\n\n  function createTimerComponent(defaultTime: string) {\n    const timerComponent = document.createElement(\"div\");\n    timerComponent.className = \"timer\";\n    timerComponent.innerHTML = `\n      <div class=\"timer-handle\"></div>\n      <input type=\"text\" placeholder=\"Timer Title\" class=\"timer-title\"/>\n      <input type=\"text\" value=\"${defaultTime}\" class=\"timer-value\"/>\n      <div class=\"btn-container flex-row\">\n        <button class=\"start-pause-btn\">▶️</button>\n        <button class=\"reset-initial-btn\">⏏️</button>\n        <button class=\"reset-default-btn\">⤵️</button>\n        <button class=\"remove-btn\">❌</button>\n      </div>\n\n    `;\n    timerList.appendChild(timerComponent);\n    return timerComponent;\n  }\n\n  function addTimer() {\n    const defaultTime = defaultTimeInput.value;\n    const timerComponent = createTimerComponent(defaultTime);\n    setupTimerControls(timerComponent, defaultTime);\n  }\n\n  function setupTimerControls(timerComponent: HTMLDivElement, initialTime: string) {\n    const timerTitle = timerComponent.querySelector(\".timer-title\") as HTMLInputElement;\n    const timerValue = timerComponent.querySelector(\".timer-value\") as HTMLInputElement;\n    const startPauseBtn = timerComponent.querySelector(\".start-pause-btn\") as HTMLButtonElement;\n    const resetInitialBtn = timerComponent.querySelector(\".reset-initial-btn\") as HTMLButtonElement;\n    const resetDefaultBtn = timerComponent.querySelector(\".reset-default-btn\") as HTMLButtonElement;\n    const removeBtn = timerComponent.querySelector(\".remove-btn\") as HTMLButtonElement;\n    let intervalId: number | undefined;\n    let wasRunning = false;\n\n    function toggleTimer(shouldStart: boolean) {\n      if (shouldStart) {\n        startTimer();\n      } else {\n        clearInterval(intervalId);\n        intervalId = undefined;\n        startPauseBtn.textContent = \"▶️\";\n        timerComponent.style.backgroundColor = \"\"; // Reset background color to default\n      }\n    }\n\n    function startTimer() {\n      // Clear background color when timer starts\n      timerComponent.style.backgroundColor = \"rgb(182, 243, 137)\"; // Turn bg color to light green\n\n      let [minutes, seconds] = timerValue.value.split(\":\").map((num: string) => parseInt(num, 10));\n      let totalSeconds = minutes * 60 + seconds;\n\n      intervalId = setInterval(() => {\n        if (totalSeconds <= 0) {\n          clearInterval(intervalId);\n          intervalId = undefined;\n          timerComponent.style.backgroundColor = \"orange\";\n          onComplete();\n          startPauseBtn.textContent = \"▶️\";\n          return;\n        }\n        totalSeconds--;\n\n        const mins = Math.floor(totalSeconds / 60).toString();\n        const secs = (totalSeconds % 60).toString().padStart(2, \"0\");\n        timerValue.value = `${mins}:${secs}`;\n      }, 1000);\n\n      startPauseBtn.textContent = \"⏸️\";\n    }\n\n    timerValue.addEventListener(\"focus\", () => {\n      if (intervalId !== undefined) {\n        wasRunning = true;\n        toggleTimer(false);\n      }\n    });\n\n    timerValue.addEventListener(\"blur\", () => {\n      if (wasRunning) {\n        toggleTimer(true);\n        wasRunning = false; // Reset the flag\n      }\n    });\n\n    startPauseBtn.addEventListener(\"click\", () => {\n      if (intervalId === undefined) {\n        toggleTimer(true);\n      } else {\n        toggleTimer(false);\n      }\n    });\n\n    resetDefaultBtn.addEventListener(\"click\", () => {\n      clearInterval(intervalId);\n      intervalId = undefined;\n      timerValue.value = defaultTimeInput.value; // Reset to the current default time\n      timerComponent.style.backgroundColor = \"\"; // Remove background color\n      startPauseBtn.textContent = \"▶️\";\n    });\n\n    resetInitialBtn.addEventListener(\"click\", () => {\n      clearInterval(intervalId);\n      intervalId = undefined;\n      timerValue.value = initialTime; // Reset to the initial time\n      timerComponent.style.backgroundColor = \"\"; // Remove background color\n      startPauseBtn.textContent = \"▶️\";\n    });\n\n    removeBtn.addEventListener(\"click\", () => {\n      clearInterval(intervalId);\n      timerComponent.remove();\n    });\n\n    function playSound() {\n      const audio = new Audio(\"complete.mp3\"); // Correct path to the sound file\n      audio.play();\n    }\n\n    function onComplete() {\n      playSound();\n      // Check if system notifications are enabled and send a notification\n      if (notifyCheckbox.checked) {\n        sendSystemNotification(`${timerTitle.value || \"Timer\"} Completed`, {\n          body: `Your ${timerTitle.value ? timerTitle.value + \" \" : \"\"}timer has finished.`,\n        });\n      }\n    }\n  }\n\n  function requestNotificationPermission() {\n    if (\"Notification\" in window) {\n      Notification.requestPermission().then(permission => {\n        if (permission === \"granted\") {\n          console.log(\"Notification permission granted.\");\n        }\n      });\n    }\n  }\n\n  function sendSystemNotification(title: string, options: NotificationOptions) {\n    if (\"Notification\" in window && Notification.permission === \"granted\") {\n      new Notification(title, options);\n    } else if (Notification.permission === \"denied\") {\n      Notification.requestPermission().then(permission => {\n        if (permission === \"granted\") {\n          new Notification(title, options);\n        }\n      });\n    }\n  }\n});\n"],"names":[],"mappings":"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"}